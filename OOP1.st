Object subclass: #Monom	instanceVariableNames: 'exp coef'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Monom methodsFor: 'setters' stamp: 'sn 1/30/2024 20:17'!coef: anInteger	(anInteger isKindOf: Integer) ifTrue:[		coef := anInteger.		^self 		]	ifFalse: [		self error: 'invalid input'		]	! !!Monom methodsFor: 'setters' stamp: 'sn 1/23/2024 17:32'!exp: anInteger	((anInteger isKindOf: Integer) and: [anInteger >= 0]) ifTrue:[		exp := anInteger.		^self		]	ifFalse: [		self error: 'invalid input'		]! !!Monom methodsFor: 'getters' stamp: '4 1/31/2024 19:04'!coef	^coef ! !!Monom methodsFor: 'getters' stamp: 'sn 1/23/2024 17:18'!exp	^exp	! !!Monom methodsFor: 'initialize-release' stamp: 'sn 1/29/2024 16:48'!initialize 	exp := 0.	coef := 0.	^self		! !!Monom methodsFor: 'operations' stamp: '4 1/31/2024 19:03'!derivative	|m|	m:= Monom new.	(exp==0) ifTrue:[		m initialize .		^m		]ifFalse: [			"derivative laws"			m coef: (coef * exp).			m exp: (exp-1).			^m		]! !Object subclass: #PolyStream	instanceVariableNames: 'block'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!PolyStream methodsFor: 'getters' stamp: 'sn 1/30/2024 17:03'!block	^block ! !!PolyStream methodsFor: 'initialize-release' stamp: 'sn 1/30/2024 18:35'!initialize 	block := [:x :set | set := Set new. 0].! !!PolyStream methodsFor: 'operations' stamp: '4 1/31/2024 19:14'!add: aPolyStream 	(aPolyStream isKindOf: PolyStream )	ifFalse:[		^self error: 'Invalid input'		]	ifTrue: [|temp|		temp := block .		"Calculate a result by invoking the 'value:' method on two 		different blocks"		block:=[:x :set| (aPolyStream block value: x value: set) + (temp 			value: x value:set). ].		].		! !!PolyStream methodsFor: 'operations' stamp: 'sn 1/30/2024 19:16'!addCoef: coef withExp: exp	(((exp isInteger) and: (coef isInteger)) and: (exp >= 0))	ifFalse: [self error: 'invalid input']	ifTrue: [|temp|		temp := block. 		block:=[:x :set| (set includes: exp) 			ifTrue: [				temp value:x value: set.				]			ifFalse: [				(coef *( x raisedToInteger: exp)) + (temp value: x value: set).				]			].		].	! !!PolyStream methodsFor: 'operations' stamp: 'sn 1/30/2024 19:37'!filter:aSet	(aSet isKindOf: Set)ifFalse: [^self error: 'Invalid input']	ifTrue: [|temp copy|		copy := aSet deepCopy.		temp := block.		block:=[:x :set| temp value:x value: copy.].		].! !!PolyStream methodsFor: 'operations' stamp: 'sn 1/30/2024 19:23'!multiplyBy:anInteger	(anInteger isKindOf: Integer)ifFalse: [^self error: 'Invalid input']	ifTrue: [|temp|		temp := block.		block:=[:x :set| anInteger *(temp value: x value: set).].		].! !!PolyStream methodsFor: 'operations' stamp: '4 1/31/2024 19:13'!substitute: anInteger 	((anInteger isKindOf: Integer) and: (anInteger ~= 0 ))ifFalse: [^self error: 'Invalid input']	"Invoke the original block temp with the result of (anInteger * x) 	and the value of set"	ifTrue: [|temp|		temp := block.		block:=[:x :set| temp value:(anInteger * x) value: set.].		].	! !!PolyStream methodsFor: 'eval' stamp: 'sn 1/30/2024 19:26'!eval: anInteger		(anInteger isKindOf: Integer)ifFalse: [^self error: 'Invalid input']	      ifTrue:[|set|			set:= Set new.			^block value: anInteger value: set. 			].! !Object subclass: #Polynom	instanceVariableNames: 'monoms'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Polynom methodsFor: 'initialize-release' stamp: 'sn 1/28/2024 22:05'!initialize 	monoms := Dictionary new.	! !!Polynom methodsFor: 'converting ' stamp: 'sn 1/28/2024 22:19'!asDictionary	^monoms! !!Polynom methodsFor: 'eval' stamp: '4 1/31/2024 19:09'!eval: anInteger	|keys  sum|	keys := monoms keys .	sum:= 0.	(monoms isEmpty )ifTrue: [^sum].	"calculate a term by raising anIteger to power of x, and add the 	term to the running sum	"	keys do:[:x | sum:= sum +((anInteger raisedToInteger: x)*(monoms at:x))].	^sum! !!Polynom methodsFor: 'operations' stamp: 'sn 1/29/2024 01:15'!add: aPolynom 	|p|	p := Polynom new.	p addPolynom: self.	p addPolynom: aPolynom.	^p! !!Polynom methodsFor: 'operations' stamp: '4 1/31/2024 19:11'!addMonom: aMonom	(aMonom isKindOf: Monom)ifFalse:[		self error: 'invalid input'. 		]	"Check if the collection monoms has a value associated with the 	monomial's exponent, If a value is present, update it by adding the 	coefficient of aMonom "	ifTrue: [		(aMonom coef == 0 )ifFalse:[				monoms at:(aMonom exp)  ifPresent:[:x|			monoms at: (aMonom exp) put: (x +aMonom coef )			]ifAbsentPut:[aMonom coef]		].	].! !!Polynom methodsFor: 'operations' stamp: 'sn 1/29/2024 01:20'!addPolynom: aPolynom	|keys m dict|	dict:= aPolynom asDictionary .	(dict isEmpty)ifTrue: [^self].	m := Monom new.	keys := dict keys.	keys do:[:x|		m exp: x.		m coef: (dict at: x).		self addMonom: m.			].	^self	! !!Polynom methodsFor: 'operations' stamp: '4 1/31/2024 19:08'!derivative	|p keys m|	p := Polynom new.	(monoms isEmpty )ifTrue: [^p].	m := Monom new.	keys := monoms keys.	"iterate over the keys, we check if x is not equal to 0, and we 	calculate the derivative by the laws"	keys do:[:x| (x == 0)ifFalse: [			m exp: x-1.			m coef: (monoms at: x)*x.			p addMonom: m.			]		].	^p	! !!Polynom methodsFor: 'operations' stamp: '4 1/31/2024 19:06'!multiplyByMonom: aMonom	|dict keys |	(aMonom isKindOf: Monom)ifFalse:[		self error: 'invalid input'. 		]	ifTrue: [		(aMonom coef ==0)ifFalse: [			keys := monoms keys .			dict := Dictionary new.			"iterate oveer the keys of the dictionary, calculate the new key by adding the exponent, 			calculate the new value based in the product of coef and existing value. and update the dictionary"			keys do:[:k | dict at: (k+aMonom exp) put:((monoms at: k )* aMonom coef ) ].			monoms := dict.		]ifTrue:[			monoms := Dictionary new.	     ]	].! !