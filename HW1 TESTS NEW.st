Object subclass: #MonomTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'HW1 TESTS'!!MonomTest methodsFor: 'initialize-release' stamp: 'Roei 8/2/2019 14:56'!initialize	! !!MonomTest methodsFor: 'initialize-release' stamp: 'Roei 8/2/2019 15:18'!test |a b n|	a := Monom new.	Transcript show: 'Test initialize and getters' ; cr.	b := a exp.	self assert: b=0.	b := a coef.	self assert: b=0.	Transcript show: 'Initialize and getters passed' ; cr.	Transcript show: 'Test setters' ; cr.	a exp: 3.	b := a exp.	self assert: b=3.	a coef: 3.	b := a coef.	self assert: b=3.	Transcript show: 'Setters passed' ; cr.	Transcript show: 'Test setters exceptions' ; cr.	[a coef: '3'] on: Error do: [b := 1].	self assert: b=1.	[a exp: '3'] on: Error do: [b := 2].	self assert: b=2.	[a exp: -1] on: Error do: [b := 4].	self assert: b=4.	b := a exp.	self assert: b=3.	Transcript show: 'Setters exceptions passed' ; cr.	Transcript show: 'Test derivative' ; cr.	a exp: 4.	a coef: -3.	n := a derivative."n is -12x^3"	b := a exp.	self assert: b=4.	b := a coef.	self assert: b=(-3).	b := n exp.	self assert: b=3.	b := n coef.	self assert: b=(-12).	a := n derivative."a is -36x^2"	b := a exp.	self assert: b=2.	b := a coef.	self assert: b=(-36).	b := n exp.	self assert: b=3.	b := n coef.	self assert: b=(-12).	n := a derivative."n is -72x^1"	b := a exp.	self assert: b=2.	b := a coef.	self assert: b=(-36).	b := n exp.	self assert: b=1.	b := n coef.	self assert: b=(-72).	a := n derivative."a is -72x^0"	b := a exp.	self assert: b=0.	b := a coef.	self assert: b=(-72).	b := n exp.	self assert: b=1.	b := n coef.	self assert: b=(-72).	n := a derivative."n is 0x^0"	b := a exp.	self assert: b=0.	b := a coef.	self assert: b=(-72).	b := n exp.	self assert: b=0.	b := n coef.	self assert: b=(0).	a := n derivative."a is 0x^0"	b := a exp.	self assert: b=0.	b := a coef.	self assert: b=(0).	b := n exp.	self assert: b=0.	b := n coef.	self assert: b=(0).	Transcript show: 'Derivative passed' ; cr.	Transcript show: 'Passed all' ; cr.! !Object subclass: #PolyStreamTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'HW1 TESTS'!!PolyStreamTest methodsFor: 'test' stamp: '1 8/5/2019 22:36'!test	|p q m b w s p1 p2 |	b:=0.	Transcript show: 'PolyStream Test'; cr.	Transcript show: 'Test addcoef'; cr.	p := PolyStream new.	p addCoef: 3 withExp: 2.	p addCoef: 4 withExp: 3.	p addCoef: 1 withExp: 7.	[p addCoef: '3' withExp: 2.] on: Error do: [b := 1].	self assert: b=1.	[p addCoef: 3 withExp: '2'.] on: Error do: [b := 2].	self assert: b=2.	[p addCoef: 3 withExp: (-2).] on: Error do: [b := 1].	self assert: b=1.	"p is 3x^2+4x^3+x^7"	self assert: ((p eval: 2) = 172).	Transcript show: 'addcoef passed'; cr.	Transcript show: 'Test add'; cr.	q := PolyStream new.	q addCoef: 3 withExp: 2.	q addCoef: 4 withExp: 3.	q addCoef: (-1) withExp: 7.	"q is 3x^2+4x^3-x^7"	s := PolyStream new.	s addCoef: 0 withExp: 2.	s addCoef: 0 withExp: 3.	s addCoef: 0 withExp: 7.	self assert: ((s eval: 999) = 0).	p add: q.	p add: s.	[p add: 3.] on: Error do: [b := 2].	self assert: b=2.	"p is 6x^2+8x^3"	self assert: ((p eval: 2) = 88).	Transcript show: 'add passed'; cr.	Transcript show: 'Test sub'; cr.	m := PolyStream new.	m addCoef: 1 withExp: 0.	p substitute: 4.	m substitute: 99.	p add: m.	"p is 1+96x^2+512x^3"	p substitute: 2.	"p is 1+384x^2+4096x^3"	self assert: ((p eval: 2) = 34305).	[p substitute: '3'.] on: Error do: [b := 1].	self assert: b=1.	[p substitute: 0.] on: Error do: [b := 2].	self assert: b=2.	Transcript show: 'sub passed'; cr.	Transcript show: 'Test mult'; cr.	w := PolyStream new.	w addCoef: 3 withExp: 1.	w addCoef: 2 withExp: 0.	"w is 2+3x"	[p multiplyBy: '3'.] on: Error do: [b := 1].	self assert: b=1.	w multiplyBy: 3.	"w is 6+9x"	self assert: ((w eval: 3) = 33).	w add:p.	"w is 7+9x+384x^2+4096x^3"	self assert: ((w eval: 3) = 114082).	w multiplyBy: 2.	self assert: ((w eval: 3) = (114082*2)).	w substitute: 2.	"w is 14+36x+3072x^2+65536x^3"	self assert: ((w eval: 2) = 536662).	Transcript show: 'mult passed'; cr.	p1 := PolyStream new.	self assert: ((p1 eval: 2) = 0).	p1 addCoef: 2 withExp: 2.	p1 addCoef: 1 withExp: 1.	p1 substitute: 4.	p1 multiplyBy: 3.	p1 addCoef: 3 withExp: 3.	p1 substitute: 2.	p1 multiplyBy: 2.	"p1 is 48x^3 + 768x^2 + 48x"	self assert: ((p1 eval: 2) = 3552).	self assert: ((p1 eval: 3 ) = 8352).	Transcript show: 'Roee1 passed'; cr.	p2 := PolyStream new.	p2 addCoef: 2 withExp: 0.	p2 addCoef: 0 withExp: 3.	p2 addCoef: 2 withExp: 3.	p2 substitute: 4.	p2 multiplyBy: 3.	p2 multiplyBy: 2.	p2 addCoef: 1 withExp: 4.	p2 substitute: 2.	p2 substitute: 2.	"p2 is 256x^4 49152x^3 + 12"	self assert: ((p2 eval: 2) = 397324).	self assert: ((p2 eval: 3) = 1347852).	Transcript show: 'Roee2 passed'; cr.	p1 add: p2.	self assert: ((p1 eval: 2) = 400876).	p1 addCoef: 12 withExp: 1.	p1 substitute: 2.	p1 multiplyBy: 2.	self assert: ((p1 eval: 0) = 24).	self assert: ((p1 eval: 1) = 801800).	self assert: ((p1 eval: 2) = 6453752).	"p1 is 8192x^4 + 787200x^3 + 6144x^2 + 240x + 24"	Transcript show: 'Roee3 passed'; cr.	Transcript show: 'All tests passed (eval too)'; cr.	! !!PolyStreamTest methodsFor: 'as yet unclassified' stamp: 'Roei 8/3/2019 11:41'!initialize	! !Object subclass: #PolynomTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'HW1 TESTS'!!PolynomTest methodsFor: 'initialize-release' stamp: 'Roei 8/2/2019 15:07'!initialize	! !!PolynomTest methodsFor: 'test' stamp: 'Roei 8/2/2019 16:18'!test |p m b q q1|	Transcript show: 'Test initiliaze, addMonom, asDictionary'; cr.	p := Polynom new.	b:=0.	(p asDictionary) keysAndValuesDo: [:aKey :aValue | Transcript "iterate over keys and values"   show: aKey printString; space;   show: aValue printString; cr].Transcript show: 'validate that nothing printed'; cr.	m := Monom new.	m exp: 2.	m coef: 3.	p addMonom: m.	m coef: 2.	p addMonom: m.	m exp: 3.	p addMonom: m.	[p addMonom: '3'] on: Error do: [b := 1].	self assert: b=1.	(p asDictionary) keysAndValuesDo: [:aKey :aValue | Transcript "iterate over keys and values"   show: aKey printString; space;   show: aValue printString; cr].Transcript show: 'validate that printed 2->5,3->2'; cr.	m coef: (-2).	p addMonom: m.	(p asDictionary) keysAndValuesDo: [:aKey :aValue | Transcript "iterate over keys and values"   show: aKey printString; space;   show: aValue printString; cr].Transcript show: 'validate that printed 2->5 only'; cr. 	m coef: 0.	m exp: 5.	p addMonom: m.	(p asDictionary) keysAndValuesDo: [:aKey :aValue | Transcript "iterate over keys and values"   show: aKey printString; space;   show: aValue printString; cr].Transcript show: 'validate that printed 2->5 only'; cr.	Transcript show: 'Initiliaze, addMonom, asDictionary finished, check above results'; cr.	Transcript show: 'Test multiplyByMonom'; cr.	m coef: 2.	m exp: 3.	p addMonom: m.	"p is 5x^2+2x^3"	m coef: 3.	m exp: 4.	[p multiplyByMonom: '3'] on: Error do: [b := 2].	self assert: b=2.	p multiplyByMonom: m.	(p asDictionary) keysAndValuesDo: [:aKey :aValue | Transcript "iterate over keys and values"   show: aKey printString; space;   show: aValue printString; cr].Transcript show: 'validate that printed 6->15,7->6 only'; cr.m exp:2.(p asDictionary) keysAndValuesDo: [:aKey :aValue | Transcript "iterate over keys and values"   show: aKey printString; space;   show: aValue printString; cr].Transcript show: 'check that printed 6->15,7->6 only again'; cr.Transcript show: 'multiplyByMonom finished, check above results'; cr.Transcript show: 'Test add'; cr."p is 15x^6+6x^7"q:=Polynom new.m coef: (-6).m exp: 7.q addMonom: m.m coef: 5.m exp:6.q addMonom: m.[p add: '3'] on: Error do: [b := 3].	self assert: b=3.q1 := (q add: p)."q1 is now 20x^6 "(q1 asDictionary) keysAndValuesDo: [:aKey :aValue | Transcript "iterate over keys and values"   show: aKey printString; space;   show: aValue printString; cr].Transcript show: 'check that printed 6->20 only'; cr.p:=Polynom new.(q1 asDictionary) keysAndValuesDo: [:aKey :aValue | Transcript "iterate over keys and values"   show: aKey printString; space;   show: aValue printString; cr].Transcript show: 'check that printed 6->20 only again'; cr.Transcript show: 'add passed'; cr.Transcript show: 'Test eval'; cr.q:=Polynom new.m coef: (-6).m exp: 7.q addMonom: m.m coef: 5.m exp:6.q addMonom: m."q is -6x^7+5x^6"[q eval: '3'] on: Error do: [b := 4].	self assert: b=4.b:=(q eval: 2).self assert: b=(-448).b:=(q eval: 0).self assert: b=(0).b:=(q eval: 1).self assert: b=(-1).q:= Polynom new.b:=(q eval: 1).self assert: b=(0).m coef: 3.m exp: 0.q addMonom: m.b:=(q eval: 81).self assert: b=(3).Transcript show: 'eval passed'; cr.Transcript show: 'Test derivative'; cr.q:=Polynom new.m coef: (-6).m exp: 7.q addMonom: m.m coef: 5.m exp:6.q addMonom: m.p := q derivative.(p asDictionary) keysAndValuesDo: [:aKey :aValue | Transcript "iterate over keys and values"   show: aKey printString; space;   show: aValue printString; cr].Transcript show: 'check that printed 6->-42,5->30 only'; cr.(q asDictionary) keysAndValuesDo: [:aKey :aValue | Transcript "iterate over keys and values"   show: aKey printString; space;   show: aValue printString; cr].Transcript show: 'check that printed 7->-6,6->5 only'; cr.Transcript show: 'derivative passed'; cr.Transcript show: 'Tests passed'; cr.			! !